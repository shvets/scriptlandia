// http://java.sun.com/j2se/1.3/docs/guide/reflection/proxy.html

import java.lang.reflect.*;

public interface Foo {
    Object bar(Object obj) throws Exception;
}

public class FooImpl implements Foo {
    public Object bar(Object obj) throws Exception {
        return obj;
    }
}

public class DebugProxy implements java.lang.reflect.InvocationHandler {

    private Object obj;

    public DebugProxy(Object obj) {
	this.obj = obj;
    }

    public static Object newInstance(Object obj) {
	return java.lang.reflect.Proxy.newProxyInstance(
	    obj.getClass().getClassLoader(),
	    obj.getClass().getInterfaces(),
	    new DebugProxy(obj));
    }

    public Object invoke(Object proxy, Method m, Object[] args)
	throws Throwable
    {
        Object result;
	try {
	    System.out.println("before method " + m.getName());
	    result = m.invoke(obj, args);
        } catch (InvocationTargetException e) {
	    throw e.getTargetException();
        } catch (Exception e) {
	    throw new RuntimeException("unexpected invocation exception: " +
				       e.getMessage());
	} finally {
	    System.out.println("after method " + m.getName());
	}
	return result;
    }
}

Foo foo = (Foo) DebugProxy.newInstance(new FooImpl());

print(foo.bar("Hello, world!"));