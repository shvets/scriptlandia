// memento.bsh

// Without violating encapsulation, capture and externalize an object's internal state
// so that the object can be restored to this state later.

class Originator {

class Memento {
  private String mementoState;

  public Memento(String state) {
    mementoState = state;
  }

  public void save() {
    mementoState = state;
  }

  public void restore() {
    state = mementoState;
  }
}

  private String state;

  public void setState(String state) { 
    this.state = state; 
  }

  public void printState() {
    System.out.println(state);
  }

  public Object getAsMemento() { 
    return new Memento(state); 
  }
  
  public void restoreFromMemento(Object m) {
    if (m instanceof Memento) {
      Memento memento = (Memento)m; 
  
      memento.restore(); 
    }
  }
}

class Caretaker {
  private List savedStates = new ArrayList();

  public void addMemento(Object memento) {
    savedStates.add(memento);
  }
 
  public Object getMemento(int index) {
    return savedStates.get(index);
  }
}

// test

Caretaker caretaker = new Caretaker();

Originator originator = new Originator();

originator.setState("State1");
System.out.print("step1: "); originator.printState();

originator.setState("State2");
System.out.print("step2: "); originator.printState();

caretaker.addMemento( originator.getAsMemento() );
System.out.print("step3: "); originator.printState();

originator.setState("State3");
System.out.print("step4: "); originator.printState();

caretaker.addMemento( originator.getAsMemento() );
System.out.print("step5: "); originator.printState();

originator.setState("State4");
System.out.print("step6: "); originator.printState();

originator.restoreFromMemento( caretaker.getMemento(1) );
System.out.print("step7: "); originator.printState();
