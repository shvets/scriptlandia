// observer.bsh

// Define a one-to-many dependency between objects so that when one object
// changes state, all it's dependents are notified and updated automatically.

interface Observer {
  void update();
}

class MyObserver implements Observer {
  String name;

  public MyObserver(String name) {
    this.name = name;
  }

  public void update() {
    System.out.println("updated " + name);
  }
}


interface Subject {
  void addObserver(Observer observer);
  
  void removeObserver(Observer observer);

  void notifyObservers();
}

class MySubject {
  private List observers = new ArrayList();

  public void addObserver(Observer observer) {
    observers.add(observer);
  }
  
  public void removeObserver(Observer observer) {
    observers.remove(observer);
  }

  public void notifyObservers() {
    List snapshot = observers.clone();

    for(int i=0; i < snapshot.size(); i++) {
      Observer observer = (Observer)snapshot.get(i);

      observer.update();
    }
  }
}

// test

Observer observer1 = new MyObserver("n1");
Observer observer2 = new MyObserver("n2");
Observer observer3 = new MyObserver("n3");

MySubject subject = new MySubject();

subject.addObserver(observer1);
subject.addObserver(observer2);
subject.addObserver(observer3);

subject.notifyObservers();
