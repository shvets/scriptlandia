// composite.bsh

// Compose objects into tree structures to represents part-whole hierarchies.
// Let's clientstreat individual objects and compositions of objects uniformly.

// 1. type interfaces: containing elements and leaves

interface Component {
  boolean add(Component component);
  boolean remove(Component component);

  List children();
}

interface Leaf implements Component {}

// 2. uncomplete implemetation

class AbstractComponent implements Component {
  protected List children = new ArrayList();

  public boolean add(Component component) {
    return children.add(component);
  }

  public boolean remove(Component component) {
    return children.remove(component);
  }

  public List children() {
    return children;
  }
}

class AbstractLeaf implements Leaf {
  public boolean add(Component component) {
    return false; // not supported
  }

  public boolean remove(Component component) {
    return false; // not supported
  }

  public List children() {
    return null; // not supported
  }
}

// 3. implementations 

class MyComponent extends AbstractComponent {
  private String name;

  public MyComponent(String name) {
    this.name = name;
  }

  public String toString() {
    return name + "\n  children: " + children;
  }                    
}

class MyLeaf extends AbstractLeaf {
  private String name;

  public MyLeaf(String name) {
    this.name = name;
  }
  
  public boolean add(Component component) {
    return false; // not supported
  }

  public String toString() {
    return name;
  }
}

// 4. test

Component component1 = new MyComponent("c1");
Component component2 = new MyComponent("c2");

Leaf leaf1 = new MyLeaf("l1");
Leaf leaf2 = new MyLeaf("l2");
Leaf leaf3 = new MyLeaf("l3");

component1.add(component2);
component1.add(leaf1);
component1.add(leaf2);

component2.add(leaf3);

System.out.println("container1: " + component1);

