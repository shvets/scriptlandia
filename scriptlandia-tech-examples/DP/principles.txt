Design Principles

- Use interfaces and dependency injection to reduce coupling;

- Favor composition over inheritance;

- Separate logic that will evolve at different rates;

- Rely on object identity as little as possible;

- Leverage static typing and generics.

1. "one object stands in for another" pattern:

  Adapter - it hides the fact that some object has the wrong interface by wrapping it with an object that has the
right interface. 

  Proxy - also wraps another object, but not with the intent of changing the interface. Instead, the proxy has the same
interface as the object that it is wrapping. The proxy isn't there to translate; it is there
to control. Proxies are good for tasks such as enforcing security, hiding the fact that an
object really lives across the network, and delaying the creation of the real object until
the last possible moment. 
  
  Decorator - enables to layer features on to a basic object.
