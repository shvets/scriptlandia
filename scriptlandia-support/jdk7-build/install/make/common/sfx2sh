#!/bin/sh
#
# Copyright 2006 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
# Convert a self-extracting zip file into a shell script that requires
# the LICENSE be read.
#
# parameters:
#
#  $1: data_file        the path to the data_file (what gets installed).
#  $2: license_file     the path to the license file.
#  $3: out_file         the name for the SFX installer output by this script.
#  $4: image            the path to an image used to calculate installed size.
#  $5: pack_files       a list of packed files, relative to the install root.
#  $6: platform         the platform of the target system.
#  $7: target_arch      the data architecture of the target system.
#  $8: is_rpm_package   set to a non-empty string for RPM installers (optional).
#
# Note: the image is used to calculate the size requirements for installation,
#       which is sizeof(image) + sizeof(data_file).
#
# Note: the pack_files can be set to the empty string for payloads that do not
#       require explicit use of unpack200 (ex.: RPM packages and debug bundles).
#

PATH=/usr/bin:/bin

data_file=$1
license_file=$2
out_file=$3
image=$4
pack_files="$5"
platform=$6
target_arch=$7
is_rpm_package=$8

javahome=`basename ${image}`

#Compute the disk space
_jre_image_disk_space=`du -sk ${image} | cut -f1`
_data_file_size=`du -sk ${data_file} | cut -f1`
diskSpaceRequired=`expr $_jre_image_disk_space + $_data_file_size`

# Note: be careful changing the date format. SCCS will substitute certain %<ch>%
#       combinations.  The format here is tested to work.
tmp_file=`date "+/tmp/install.%S$$%j%y%m%d%M\`expr $$ % 251\`%H.bin"`
rm -f $tmp_file
touch $tmp_file

# emit the beginning of the script
cat - > $tmp_file <<'EOF'
#!/bin/sh
PATH=/usr/bin:/bin
umask 022
EOF

echo "javahome=$javahome" >> $tmp_file
echo "platform=$platform" >> $tmp_file
echo "PACKED_JARS=\"${pack_files}\"" >> $tmp_file
echo "ARCH=${target_arch}" >> $tmp_file
if [ "${is_rpm_package}" = "RPM" ]; then
    echo "RPM_NAME=`basename ${out_file} | sed 's|-rpm.sh|.rpm|'`" >> $tmp_file
fi

echo "diskSpaceRequired=$diskSpaceRequired" >> $tmp_file

if [ -n "$license_file" ]; then
    # emit the code the show the license file
    echo 'more <<"EOF"' >> $tmp_file
    cat $license_file >> $tmp_file
    echo EOF >> $tmp_file

    # emit the script to ask if they agree to the license
    cat - >> $tmp_file <<'EOF'
    agreed=
    while [ -z "$agreed" ]; do
        echo
        echo "Do you agree to the above license terms? [yes or no] "
        read reply leftover
        case $reply in
            [yY] | [yY][eE][sS])
                agreed=1
                ;;
            [nN] | [nN][oO])
                echo "If you don't agree to the license you can't install this software";
                exit 1
                ;;
        esac
    done
EOF
# the above EOF has to start in column 1 or the script won't work

fi

cat - >> $tmp_file <<'EOF'
if [ "`uname -s`" = "Linux" ]; then
    tail_args="-n"
fi

outname=install.sfx.$$
diskSpace=`df -k . | tail ${tail_args} -1 | awk '{if ( $4 ~ /%/) { print $3 } else { print $4 } }'`
if [ $diskSpace -lt $diskSpaceRequired ]; then
    printf "You will need atleast %s kBytes of Disk Free\n" $diskSpaceRequired
    printf "Please free up the required Disk Space and try again\n"
    exit 3
fi
trap 'rm -f $outname; exit 1' HUP INT QUIT TERM
echo "Unpacking..."
tail ${tail_args} +_LINES_TO_STRIP_ "$0" > $outname
if [ -x /usr/bin/sum ]; then
    echo "Checksumming..."

    sum=`/usr/bin/sum $outname`
    index=1
    for s in $sum; do
        case $index in
            1)
                sum1=$s;
                index=2;
                ;;
            2)
                sum2=$s;
                index=3;
                ;;
        esac
    done
    if [ $sum1 -ne _SUM_1_ ] || [ $sum2 -ne _SUM_2_ ]; then
        echo "The download file appears to be corrupted.  Please refer"
        echo "to the Troubleshooting section of the Installation"
        echo "Instructions on the download page for more information."
        echo "Please do not attempt to install this archive file."
        exit 1
    fi
else
    echo "Can't find /usr/bin/sum to do checksum.  Continuing anyway."
fi
chmod +x $outname
echo "Extracting..."
./$outname
rm -f $outname #we dont need it anymore, so conserve disk space


if [ -z "${RPM_NAME}" ]; then
    if [ ! -d ${javahome} ]; then
        echo "Failed to extract the files.  Please refer to the Troubleshooting section of"
        echo "the Installation Instructions on the download page for more information."
        exit 1
    fi

    UNPACK_EXE=$javahome/bin/unpack200
    if [ -f $UNPACK_EXE ]; then
        chmod +x $UNPACK_EXE 
        packerror=""
        for i in $PACKED_JARS; do
            if [ -f $javahome/`dirname $i`/`basename $i .jar`.pack ]; then
                printf "Creating %s\n" $javahome/$i
                $UNPACK_EXE $javahome/`dirname $i`/`basename $i .jar`.pack $javahome/$i
                if [ $? -ne 0 ] || [ ! -f $javahome/$i ]; then
                    printf "ERROR: Failed to unpack JAR file:\n\n\t%s\n\n" $i
		    printf "Installation failed. Please refer to the Troubleshooting Section of\n"
		    printf "the Installation Instructions on the download page.\n"
                    packerror="1"
		    break
                fi

		# remove the old pack file
		rm -f $javahome/`dirname $i`/`basename $i .jar`.pack
            fi
        done
        if [  "$packerror" = "1" ]; then 
            if [ -d $javahome ]; then
                /bin/rm -rf $javahome
            fi

	    exit 2
        fi
    fi

    PREFS_LOCATION="`echo \"${javahome}\" | sed -e 's/^jdk.*/&\/jre/'`/.systemPrefs"
    if [ ! -d "${PREFS_LOCATION}" ]; then
        mkdir -m 755 "${PREFS_LOCATION}"
    fi
    if [ ! -f "${PREFS_LOCATION}/.system.lock" ]; then
        touch "${PREFS_LOCATION}/.system.lock"
        chmod 644 "${PREFS_LOCATION}/.system.lock"
    fi
    if [ ! -f "${PREFS_LOCATION}/.systemRootModFile" ]; then
        touch "${PREFS_LOCATION}/.systemRootModFile"
        chmod 644 "${PREFS_LOCATION}/.systemRootModFile"
    fi

    if [ x$ARCH = "x32" ] && [ -f "$javahome/bin/java" ]; then
        "$javahome/bin/java" -client -Xshare:dump > /dev/null 2>&1
    fi
else
    if [ "$1" = "-x" ]; then
        echo "Extraction of RPM Done."
    else
        #  If rpm and the file exists then use rpm to install.
        if [ -f `pwd`/$RPM_NAME ]; then
            rpm -ivh `pwd`/$RPM_NAME
        fi
    fi
fi
echo " "
echo "Done."
exit 0
EOF

# count the number of lines in the file and rewrite it so that tail
# strips the right amount off
lines=`wc -l $tmp_file | awk '{ print $1 + 1; }'`
sum=`/usr/bin/sum $data_file`
index=1
for s in $sum; do
    case $index in
        1)
            sum1=$s;
            index=2;
            ;;
        2)
            sum2=$s;
            index=3;
            ;;
    esac
done

sed -e "s/_LINES_TO_STRIP_/$lines/" -e "s/_SUM_1_/$sum1/" \
    -e "s/_SUM_2_/$sum2/" $tmp_file  > $out_file

cat $data_file >> $out_file
chmod +x $out_file
rm -f $tmp_file
