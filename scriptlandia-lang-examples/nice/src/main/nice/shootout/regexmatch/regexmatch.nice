/* The Great Computer Language Shootout 
   contributed by Isaac Gouy

   Transliterated from Java solution

To compile:   
   nicec --sourcepath .. -d . -a regexmatch.jar regexmatch

To run:
   java -jar regexmatch.jar < input.txt 9000
*/

import java.io.*;
import java.util.regex.*;
import ackermann; // reuse toSinglePositiveInt

void main(String[] args){
   var n = toSinglePositiveInt(args);    
   let lines = new LinkedList();

   let in = new BufferedReader(new InputStreamReader(System.in));
   var ?String line;
   while ((line = in.readLine()) != null) 
      lines.addLast(line);
   in.close;
   
   let pattern = Pattern.compile(
      "(?:^|[^\\d\\(])"+                    // must be preceeded by non-digit
      "(?:\\((\\d\\d\\d)\\)|(\\d\\d\\d))"+  // area code is 3 digits (match 1&2)
      "[ ]"+                                // area code followed by one space
      "(\\d\\d\\d)"+                        // match 3: prefix of 3 digits
      "[ -]"+                               // separator is either space or dash
      "(\\d\\d\\d\\d)"+                     // match 4: last 4 digits
      "(?:\\D|$)"                           // must be followed by a non-digit
   );
   
   var ?String areaCode;
   var m = pattern.matcher("");
   var count = 0;
   let buffer = new StringBuffer();

   while (n-- > 0){          
      for (each : lines){
         m = pattern.matcher(each);
         if (m.find()) {
            buffer.setLength(0);
            buffer.append("(");
            if ((areaCode = m.group(1)) != null) 
               buffer.append(areaCode);       
            else 
               buffer.append(m.group(2));               
            buffer.append(") ").append(m.group(3)).append("-").append(m.group(4));
                                    
            if (n == 0)	println( ++count + ": " + buffer);  
         }      
      }
   }        
}


