/* The Great Computer Language Shootout 
   contributed by Isaac Gouy

To compile:	
   nicec --sourcepath=.. -d=. -a wordfreq.jar wordfreq

To run:
   java -jar wordfreq.jar < input.txt > out.txt
*/


import java.io.*;

void main(String[] args){
   let buffer = new StringBuffer(32);
   let HashMap<String,Cell> wordCounts = new HashMap();

// local method
   void flushWordBuffer(){
      ?Cell count;
      if (buffer.length > 0) { 
         var word = buffer.toString;
         if ((count = wordCounts[word]) == null) 
            wordCounts[word] = new Cell(value: 1);
         else 
            count.value++;
         buffer.setLength(0);
      }
   }


   try 
   {
      let r = new BufferedReader(new InputStreamReader(System.in));
      int v; 
      while ((v = r.read) != -1) {
         let c = char(v);
         if (Character.isLetter(c)) 
            buffer.append(Character.toLowerCase(c));
         else 
            flushWordBuffer();
      }
      flushWordBuffer();
   } 
   catch (IOException e) { 
      System.err.println(e); }

   ArrayList<Map.Entry<String, Cell>> entries = new ArrayList(wordCounts.entrySet);

// Use an anonymous function to define the sort, no type casts needed
   sort( entries, 
      (Map.Entry<String, Cell> e1, Map.Entry<String, Cell> e2) => {
         let i = e2.getValue.value - e1.getValue.value; // sort by frequency
         if (i != 0) return i;
         else return e2.getKey.compareTo( e1.getKey );  // sort by word
         }
      );

   for (each : entries) {
      buffer.setLength(0);
      let count = each.getValue.value.toString;
      var pad = 7 - count.length;
      while (pad-- > 0) buffer.append(' ');

      buffer.append(count);
      buffer.append("\t");
      buffer.append(each.getKey);
      println(buffer);
   }
}


class Cell { int value; }
