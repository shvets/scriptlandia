/* The Great Computer Language Shootout 
   contributed by Isaac Gouy

To compile:	
   nicec --sourcepath=.. -d=. -a except.jar except

To run:
   java -ea -jar except.jar 20000
*/


import ackermann; // reuse toSinglePositiveInt

void main(String[] args){
   let n = toSinglePositiveInt(args);

   for(var i=0; i<n; i++) some_function(i);

   print("Exceptions: HI="); print(Hi); 
   print(" / LO="); println(Lo);
}


class Lo_Exception extends Exception {}
class Hi_Exception extends Exception {}

var int Lo = 0;
var int Hi = 0;


void blowup(int n) {
   if ((n % 2) == 0) 
      throw new Lo_Exception("Lo_Exception");
   else 
      throw new Hi_Exception("Hi_Exception");
}


void lo_function(int n) {
   try { blowup(n); } 
   catch (Lo_Exception e) { Lo++; }
}


void hi_function(int n) {
   try { lo_function(n); } 
   catch (Hi_Exception e) { Hi++; }
}


void some_function(int n) {
   try { hi_function(n); } 
   catch (Exception e) 
      { println("We shouldn't get here: " + e.toString()); }
}