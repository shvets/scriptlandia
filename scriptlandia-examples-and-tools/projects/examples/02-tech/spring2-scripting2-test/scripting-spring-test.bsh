// scripting-spring-test.bsh

org.sf.scriptlandia.ScriptlandiaHelper.addMavenDependencies("pom.xml");

import org.sf.scriptlandia.launcher.ScriptlandiaLauncher;
import org.codehaus.janino.*;

import org.sf.scriptlandia.util.*;
import org.codehaus.classworlds.ClassRealm;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;


public class ScriptingTest {
  public ScriptingTest() {
    init();
  }

  private void init() {
    ScriptlandiaLauncher launcher = ScriptlandiaLauncher.getInstance();

    ClassLoader cl = new JavaSourceClassLoader(
            launcher.getClass().getClassLoader(),  // parentClassLoader
            new File[] { new File(".") }, // optionalSourcePath
            (String) null,                     // optionalCharacterEncoding
            DebuggingInformation.NONE          // debuggingInformation
    );


    loadClass("Lime", cl, launcher);
    loadClass("Coconut", cl, launcher);
  }

  private void loadClass(String name, ClassLoader cl, ScriptlandiaLauncher launcher) {
    String[] args = new String[] { name };

    Map bytecodes = ReflectionUtil.invokePrivateMethod(
      cl, new Object[] { name }, JavaSourceClassLoader.class, "generateBytecodes", new Class[] { String.class });

    ClassRealm classRealm = launcher.getMainRealm();

    classRealm.addConstituent(name, bytecodes.get(name));
  }

  public static void main(String[] args) throws Exception {
    ScriptingTest scriptingTest = new ScriptingTest();

    ApplicationContext factory = new FileSystemXmlApplicationContext(
      new String[] {
        "scripting-spring-test.xml"
      });
  
    Coconut coconut = (Coconut) factory.getBean("coconut1");
    coconut.drinkThemBothUp();

    Coconut coconut2 = (Coconut) factory.getBean("coconut2");
    coconut2.drinkThemBothUp();

    Coconut coconut3 = (Coconut) factory.getBean("coconut3");
    coconut3.drinkThemBothUp();
  }

}
