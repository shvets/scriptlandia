/* The Great Computer Language Shootout 
   contributed by Isaac Gouy

To compile:	
   nicec --sourcepath=.. -d=. -a hash2.jar hash2

To run:
   java -ea -jar hash2.jar 150
*/


import ackermann; // reuse toSinglePositiveInt

void main(String[] args){
   var n = toSinglePositiveInt(args);
   let nKeys = 10000;

   let table1 = new HashMap(nKeys);
   let table2 = new HashMap();
   for (int i = 0; i <= nKeys; i++) 
      table1["foo_" + i] = new Cell(value: i);

   String key;
   int v1;        
   ?Cell c2;      // c2 = table2[key] can be null 

   while (n-- > 0) 
     for (each : table1.entrySet) {
         key = each.getKey;
         v1 = each.getValue.value;                       
         if ( (c2 = table2[key]) != null)
            c2.value += v1;   
         else 
            table2[key] = new Cell(value: v1);
      }
   
   print(table1["foo_1"]);
   print(" " + table1["foo_9999"]);
   print(" " + table2["foo_1"]);
   println(" " + table2["foo_9999"]);
}


class Cell { int value; }

toString(Cell c) = c.value.toString;