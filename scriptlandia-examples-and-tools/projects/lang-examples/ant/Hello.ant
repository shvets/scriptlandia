<!-- Hello.ant -->

<project name="Hello.antlet" default="all" basedir=".">
  <property environment="env"/>

  <target name="all">
<!--    <antcall target="javafx"/>-->

    <antcall target="ant"/>
    <antcall target="bsh"/>
    <antcall target="js"/>
    <antcall target="ruby"/>

    <antcall target="groovy"/>
    <antcall target="jelly"/>
    <!--antcall target="scala"/-->
    <antcall target="jscheme"/>
    <antcall target="jaskell"/>
  </target>

  <target name="ant">
    <echo>
      Hello, World from Ant echo!
    </echo>
  </target>

  <target name="bsh">
    <script language="beanshell">
      System.out.println("Hello, World from BeanShell!");
    </script>
  </target>

  <target name="js">
    <script language="javascript">
      importPackage(Packages.java.lang);

      System.out.println("Hello, World from JS!");
    </script>
  </target>

  <target name="groovy">
    <script language="groovy">
      println("Hello world from Groovy!")
    </script>
  </target>

  <target name="jelly">
    <taskdef name="jelly" classname="org.apache.commons.jelly.task.JellyTask">
      <classpath>
        <fileset dir="${repository.home}/commons-jelly/commons-jelly-tags-ant/1.1">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </taskdef>

    <jelly script="../jelly/hello_world.jelly"/>
  </target>

  <target name="ruby">
    <script language="ruby">
      require 'java'

      include_class "java.util.Locale"

      print "Hello, World from JRuby!. My locale is: ", Locale.getDefault()
    </script>
  </target>

  <target name="scala">
    <script language="scala">
      Console.println("Hello, world from Scala!")
     </script>
  </target>

  <target name="jscheme">
    <script language="jscheme">
      (display "Hello World from JScheme!") (newline)
    </script>
  </target>

  <target name="jaskell">
    <script language="jaskell">
      print "Hello World from Jaskell!"
    </script>
  </target>

  <target name="javafx">
    <script language="beanshell">
      import org.apache.bsf.BSFManager;

      import org.sf.scriptlandia.launcher.ScriptlandiaLauncher;

      String repositoryHome = System.getProperty("repository.home");

      String javaVersion = System.getProperty("java.version");

      print("Java Version: " + javaVersion);

      String javaSpecificationVersion = "jdk1.5";

      if(javaVersion.startsWith("1.5")) {
        javeapecifivationVersion = "jdk1.5";
      }
      else if(javaVersion.startsWith("1.6")) {
        javaSpecificationVersion = "jdk1.6";
      }

      print("javaSpecificationVersion: " + javaSpecificationVersion);

//      String pom = repositoryHome + "/javax/script/all-engines-" + javaSpecificationVersion + "/1.0/all-engines-" + 
//                   javaSpecificationVersion + "-1.0.pom";

      import org.sf.scriptlandia.ScriptlandiaHelper;

//      ScriptlandiaHelper.addMavenDependencies(repositoryHome + "/javax/script/script-api/1.0/script-api-xml.pom");
//      ScriptlandiaHelper.addMavenDependencies(repositoryHome + "/javafx/javafx/20070506220507/javafx-20070506220507.pom");


      ScriptlandiaLauncher launcher = ScriptlandiaLauncher.getInstance();
      print("launcher " + launcher);

      launcher.addClasspathEntry(repositoryHome + "/javax/script/script-api/1.0/script-api-1.0.jar");
      launcher.addClasspathEntry(repositoryHome + "/javafx/javafx/20070506220507/javafx-20070506220507.jar");
      launcher.addClasspathEntry(repositoryHome + "/javafx/filters/20070506220507/filters-20070506220507.jar");

/*
ClassLoader loader =
        Thread.currentThread().getContextClassLoader();
        ScriptEngineManager manager = new ScriptEngineManager(loader);
        ScriptEngine engine = manager.getEngineByExtension("fx");

        // Bind the feed reader to the script's bindings...
        Bindings bindings = engine.createBindings();
        bindings.put("READER:com.oreilly.onjava.feedticker.FeedReader", reader);

        // Bind a JComponent to the script's bindings... the JavaFX script creates a canvas and adds
        // itself to this component.
        bindings.put("MY_CONTAINER:javax.swing.JComponent", frame.getContentPane());

        ScriptContext context = new SimpleScriptContext();
        // Bug workaround  (don't ask me, I have no idea what this means...TO)
        context.setBindings(bindings, ScriptContext.GLOBAL_SCOPE);
        context.setBindings(bindings, ScriptContext.ENGINE_SCOPE);
        engine.setContext(context);

        // Evaluate the Script
        String script = "import com.oreilly.onjava.feedticker.Ticker;";
        engine.eval(script);
*/
      BSFManager.registerScriptingEngine("javafx", "org.sf.scriptlandia.JavaFXScriptEngine", new String[] { "fx" });
    </script>

    <script language="javafx">
      import java.lang.System;

      import javafx.ui.*;

      Frame {
          onClose: operation() {
              System.exit(0);
          }

          title: "Hello World Java FX"

          width: 200
          height: 200

          content: Label {

              text: "Hello World"

          }

          visible: true
      }
    </script>
  </target>
</project>
