// CLASSPATH section

String repositoryHome = System.getProperty("repository.home");

addClassPath(repositoryHome + "/javax/activation/activation/1.0.2/activation-1.0.2.jar");
addClassPath(repositoryHome + "/javax/mail/mail/1.3.3_01/mail-1.3.3_01.jar");


// import section

import java.io.InputStream;
import java.io.FileInputStream;
import java.util.Properties;

import javax.mail.Session;
import javax.mail.Message;
import javax.mail.BodyPart;
import javax.mail.Multipart;
import javax.mail.Address;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMultipart;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.activation.DataHandler;

// init section

// methods section

Multipart getContent(File file) {
  // Put parts in message
  Multipart content = new MimeMultipart();

  // Part one is plain text
  BodyPart messageBodyPart1 = new MimeBodyPart();

  // Fill the message
  messageBodyPart1.setText("This e-mail has attachment");

  content.addBodyPart(messageBodyPart1);

  // Part two is attachment
  BodyPart messageBodyPart2 = new MimeBodyPart();

  DataSource source = new FileDataSource(file);

  messageBodyPart2.setDataHandler(new DataHandler(source));
  messageBodyPart2.setFileName(file.getName());

  content.addBodyPart(messageBodyPart2);

  return content;
}

void send(Properties props, File[] files) {
  String mailTransportProtocol = props.getProperty("mail.transport.protocol");
  String mailHostName = props.getProperty("mail.smtp.host");
  String mailUserName = props.getProperty("mail.user");
  String mailPassword = props.getProperty("mail.password");

  String fromEmail = props.getProperty("mail.from.address");
  String fromName = props.getProperty("mail.from.name");

  String toEmail = props.getProperty("mail.to.address");
  String toName = props.getProperty("mail.to.name");

  Session session = Session.getDefaultInstance(props, null);
  Transport transport = session.getTransport(mailTransportProtocol);

  transport.connect(mailHostName, mailUserName, mailPassword);

  for(int i=0; i < files.length; i++) {
    // Define message
    MimeMessage message = new MimeMessage(session);

    message.setContent(getContent(files[i]));

    message.setSubject("Transparent send-fetch");

    Address fromAddress = new InternetAddress(fromEmail, fromName);
    Address toAddress = new InternetAddress(toEmail, toName);

    message.setFrom(fromAddress);

    message.addRecipient(Message.RecipientType.TO, toAddress);

    message.saveChanges(); // implicit with send()

    System.out.println("Sending message # " + (i+1));
    transport.sendMessage(message, message.getAllRecipients());
  }

  transport.close();
}

// execution area

Properties props = new Properties();

InputStream is = new FileInputStream("mail.send.properties");

props.load(is);

is.close();

File[] files = new File("OUT").listFiles();

send(props, files);
