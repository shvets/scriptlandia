// create-archetype.bsh 
// Author: Alexander Shvets

org.sf.scriptlandia.ScriptlandiaHelper.resolveDependencies("jdom", "jdom", "1.0");

sourceRelative("Group.bsh");
sourceRelative("Archetype.bsh");
sourceRelative("create-archetype-gui.bsh");
sourceRelative("XmlHelper.bsh");

import org.jdom.Document;
import org.jdom.Attribute;
import org.jdom.input.SAXBuilder;

public class ArchetypeCreator extends XmlHelper {
  private BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

  private boolean isConsoleMode = false;

  private List groups = new ArrayList();

  public ArchetypeCreator(String[] args) {
    if(args.length > 0) {
      if(args[0].equalsIgnoreCase("-console")) {
        isConsoleMode = true;
      }
    }
  }

  public boolean isConsoleMode() {
    return isConsoleMode;
  }

  public void setConsoleMode(boolean isConsoleMode) {
    this.isConsoleMode = isConsoleMode;
  }

  public List getGroups() {
    return groups;
  }

  public void readConfigFile(String fileName) {
    groups.clear();

    read(new File(fileName));

    Element root = document.getRootElement();

    List children = root.getChildren();

    for (int i=0; i < children.size(); i++) {
      Object o = children.get(i);

      if (o instanceof Element) {
        groups.add(readGroup((Element) o));
      }
    }
  }

  private Group readGroup(Element element) {
    String name = element.getAttribute("name").getValue();
    String groupId = element.getAttribute("groupId").getValue();
    String version = element.getAttribute("version").getValue();

    Attribute prefixAttribute = element.getAttribute("prefix");

    String prefix;

    if(prefixAttribute != null) {
      prefix = prefixAttribute.getValue();
    }
    else {
      prefixn = "";
    }

    Group group = new Group();

    group.setName(name);
    group.setGroupId(groupId);
    group.setPrefix(prefix);
    group.setVersion(version);

    List archetypes = group.getArchetypes();
    archetypes.clear();

    List children1 = getElementByName(element, "archetypes").getChildren();

    for (int i=0; i < children1.size(); i++) {
      Object o = children1.get(i);

      if (o instanceof Element) {
        archetypes.add(readArchetype(o, group));
      }
    }

    List repositories = group.getRepositories();
    repositories.clear();

    Element repositoriesElement = getElementByName(element, "repositories");

    if(repositoriesElement != null) {
      List children2 = repositoriesElement.getChildren();

      for (int i=0; i < children2.size(); i++) {
        Object o = children2.get(i);

        if (o instanceof Element) {
          repositories.add(o.getText());
        }
      }
    }

    Element notesElement = getElementByName(element, "notes");

    if(notesElement != null) {
      group.setNotes(notesElement.getText());
    }

    return group;
  }

  private Archetype readArchetype(Element element, Group group) {
    String prefix = group.getPrefix();

    String name;

    if(prefix != null) {
      name = prefix + element.getAttribute("name").getValue();
    }
    else {
      name = element.getAttribute("name").getValue();
    }

    Attribute descriptionAttribute = element.getAttribute("description");

    String description;

    if(descriptionAttribute != null) {
      description = descriptionAttribute.getValue();
    }
    else {
      description = "";
    }

    Attribute versionAttribute = element.getAttribute("version");

    String version;

    if(versionAttribute != null) {
      version = versionAttribute.getValue();
    }
    else {
      version = group.getVersion();
    }

    Archetype archetype = new Archetype();

    archetype.setName(name);
    archetype.setDescription(description);
    archetype.setVersion(version);

    return archetype;
  }

  private int readInteger() {
    int choice = -1;

    while(choice == -1) {
      System.out.print(">");
      String input = in.readLine();

      try {
        choice = new Integer(input);
      }
      catch(NumberFormatException e) {
        ;
      }
    }

    return choice;
  }

  private String readString() {
    String choice = "";

    while(choice.equals("")) {
      System.out.print(">");

      choice = in.readLine();
    }

    return choice;
  }

  public void interactConsole() {
    System.out.println("Enter Archetype Group:");
    System.out.println("Available List:");

    List groups = getGroups();

    for(int i=0; i < groups.size(); i++) {
      Group group = (Group)groups.get(i);

      System.out.println("" + (i+1) + ": " + group.getName());
    }

    int choice1 = readInteger();

    Group group = (Group)groups.get(choice1-1);

    System.out.println("You selected group: " + group.getName());

    System.out.println("Enter Archetype:");
    System.out.println("Available List:");

    List archetypes = group.getArchetypes();

    for(int i=0; i < archetypes.size(); i++) {
      Archetype archetype = (Archetype)archetypes.get(i);

      System.out.println("" + (i+1) + ": " + archetype.getName() + " -> " + archetype.getDescription());
    }

    int choice2 = readInteger();

    Archetype archetype = (Archetype)archetypes.get(choice2-1);

    System.out.println("You selected archetype: " + archetype.getName());

    System.out.println("Group ID:");
    String groupId = readString();

    System.out.println("Artifact ID:");
    String artifactId = readString();

    System.out.println("Version:");
    String version = readString();

    print(groupId);
    print(artifactId);
    print(version);

    System.out.println("Creating archetype...");
    createArchetype(group, archetype, groupId, artifactId, version);
    System.out.println("Archetype created.");
  }

  public void createArchetype(Group group, Archetype archetype, 
                              String groupId, String artifactId, String version) {
    System.setProperty("archetypeGroupId", group.getGroupId());
    System.setProperty("archetypeArtifactId", archetype.getName());
    System.setProperty("archetypeVersion", archetype.getVersion());

    System.setProperty("groupId", groupId);
    System.setProperty("artifactId", artifactId);
    System.setProperty("version", version);

    List repositories = group.getRepositories();

    if(repositories.size() > 0) {
      StringBuffer sb = new StringBuffer();

      for(int i=0; i < repositories.size(); i++) {
        sb.append(repositories.get(i));

        if(i < repositories.size()-1) {
          sb.append(" ");
        }
      }

      System.setProperty("remoteRepositories", sb.toString());
    }

    String[] args = new String[] { "archetype:create" };

    MavenHelper.executeMaven(args);
  }

  public static void main(String[] args) {
    ArchetypeCreator archetypeCreator = new ArchetypeCreator(bsh.args);

    archetypeCreator.readConfigFile("archetypes.xml");

    if(archetypeCreator.isConsoleMode()) {
      archetypeCreator.interactConsole();
    }
    else {
      CreateArchetypeFrame frame = new CreateArchetypeFrame(archetypeCreator);

      frame.setVisible(true);
    }
  }

}

