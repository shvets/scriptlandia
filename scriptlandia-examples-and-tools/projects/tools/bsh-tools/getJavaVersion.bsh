// analyzeJavaVersion.bsh

import java.util.jar.JarFile;
import java.util.jar.JarEntry;

import org.sf.classfile.ClassFile;

public class AnalyzeJar {
  private Map versions = new HashMap();

  public void analyze(List files) {
    for(int i=0; i < files.size(); i++) {
      File file = (File)files.get(i);

      analyze(new JarFile(file));
    }
  }

  public void analyze(JarFile jarFile) {
    Enumeration e = jarFile.entries();

    while (e.hasMoreElements()) {
      JarEntry jarEntry = (JarEntry)e.nextElement();

      String name = jarEntry.getName();

      if(name.endsWith(".class") && !name.contains("$")) {
        InputStream is = jarFile.getInputStream(jarEntry);

        analyzeClass(name, new DataInputStream(is));
      }
    }

    analyzeVersioning();
  }

  private void analyzeClass(String classFileName, DataInput is) {
    String className = classFileName.replace('/', '.').substring(0, classFileName.indexOf(".class"));

    ClassFile classFile = new ClassFile();
    classFile.read(is);

    String javaSpecificationVersion = getJavaSpecificationVersion(classFile.getMajorVersion());

    if(versions.get(javaSpecificationVersion) == null) {
      versions.put(javaSpecificationVersion, javaSpecificationVersion);
    }

    System.out.println(className + ": " + javaSpecificationVersion);
  }

  private void analyzeVersioning() {
    if(versions.size() == 1) {
      System.out.println("Versioning: OK");
    }
    else {
      System.out.println("Versioning: different versions are located:");

      Iterator iterator = versions.keySet().iterator();

      while(iterator.hasNext()) {
        System.out.println(iterator.next());
      }
    }
  }

  /**
   *  1.1: 00 2D (= 45)
   *  1.2: 00 2E (= 46)
   *  1.3: 00 2F (= 47)
   *  1.4: 00 30 (= 48)
   *  1.5: 00 31 (= 49)
   *  1.6: 00 32 (= 50) 
   */
  public String getJavaSpecificationVersion(int majorVersion) {
    String javaSpecificationVersion = "1.1";

    if(majorVersion == 45) {
      javaSpecificationVersion = "1.1";
    }
    else if(majorVersion == 46) {
      javaSpecificationVersion = "1.2";
    }
    else if(majorVersion == 47) {
      javaSpecificationVersion = "1.3";
    }
    else if(majorVersion == 48) {
      javaSpecificationVersion = "1.4";
    }
    else if(majorVersion == 49) {
      javaSpecificationVersion = "1.5";
    }
    else if(majorVersion == 50) {
      javaSpecificationVersion = "1.6";
    }

    return javaSpecificationVersion;
  }
}

List files = new ArrayList();

String fileName = null;

if(bsh.args.length == 0) {
  fileName = System.getProperty("user.dir");
}
else {
  fileName = bsh.args[0];
}

File file = new File(fileName);

if(file.isDirectory()) {
  File[] listFiles = file.listFiles();

  for(int i=0; i < listFiles.length; i++) {
    if(listFiles[i].getName().endsWith(".jar")) {
      files.add(listFiles[i]);
    }
  }
}
else if (fileName.endsWith(".jar")) {
  files.add(file);
}


import org.sf.scriptlandia.launcher.ScriptlandiaLauncher;
ScriptlandiaLauncher launcher = ScriptlandiaLauncher.getInstance();

launcher.resolveDependencies("org.sf.classfile", "classfile", "1.1");

AnalyzeJar analyzer = new AnalyzeJar();

analyzer.analyze(files);

