//

import java.io.File;
import java.io.FileInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

interface Processor {
  void process(File file);

  void setExtensions(List extensions);
}

interface Rule {
  Object execute(Object[] parameters);
}

class FileUtil {

  private FileUtil() {}

  public static String getExtension(String fileName) {
    String extension = null;

    int pos = fileName.lastIndexOf('.');

    if(pos > 0 && pos < fileName.length()-1) {
      extension = fileName.substring(pos+1).toLowerCase();
    }

    return extension;
  }

  public static String getIndex(int i) {
    if(i < 10) {
      return "0" + i;
    }

    return "" + i;
  }

}

class RuleProcessor implements Processor {
  private List extensions = new ArrayList();

  protected Rule rule;

  public RuleProcessor(Rule rule) {
    this.rule = rule;
  }

  public void process(File file) {
    if(file.isDirectory()) {
      processDirectory(file);
    }
    else if(file.isFile()) {
      processFile(file, 1);
    }
  }

  protected void processDirectory(File directory) {
    File[] list = directory.listFiles();

    for(int i=0, j=1; i < list.length; i++) {
      File file = list[i];

      if(file.isFile()) {
        if(processFile(file, j)) {
          j++;
        }
      }
      else if(file.isDirectory()) {
        processDirectory(file);
      }
    }
  }

  protected boolean processFile(File file, int index) {
    String extension = FileUtil.getExtension(file.getName());

    if(extensions.contains(extension) || extensions.size() == 0) {
      rule.execute(new Object[] { file, new Integer(index) });
      return true;
    }

    return false;
  }

  public void setExtensions(List extensions) {
    this.extensions = extensions;
  }

}


abstract class RenameRule implements Rule {

  public Object execute(Object[] parameters) {
    File file = (File)parameters[0];

    boolean ok = rename(file);

    if(!ok) {
      print("File " + file.getName() + " cannot be renamed.");
    }

    return Boolean.valueOf(ok);
  }

  boolean rename(File file) {
    String oldName = file.getPath();
    String newName = getNewName(oldName);

    if(!newName.equals(oldName)) {
      File newFile = new File(newName);

      return file.renameTo(newFile);
    }

    return true;
  }

  protected abstract String getNewName(String oldName);

}


abstract class RenameByMapRule extends RenameRule {
  private Map names = new HashMap();

  public RenameByMapRule(File fileMap) throws IOException {
    DataInputStream is = new DataInputStream(new FileInputStream(fileMap));
    
    for(int i = 0; true; i++) {
      String line = is.readLine();

      if(line == null) {
        break;
      }

      names.put(FileUtil.getIndex(i+1), line);
    }

    is.close();
  }

  public String getNewName(String oldName) {
    return (String)names.get(oldName);
  }

}
