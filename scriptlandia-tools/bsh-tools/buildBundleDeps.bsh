// buildBundleDeps.bsh 

import java.io.File;
import java.util.jar.Attributes;
import java.util.jar.Manifest;
import java.util.jar.JarFile;
import java.util.*;
import java.util.zip.ZipEntry;

class ImportPair {
  String name;
  String version;

  ImportPair(String name, String version) {
    this.name = name;
    this.version = version;
  }

  String toString() {
    return "ImportPair {" + name + ", " + version + "}";
  }
}

class ExportPair {
  String fileName;
  String name;
  String version;

  ExportPair(String fileName, String name, String version) {
    this.fileName = fileName;
    this.name = name;
    this.version = version;
  }

  String toString() {
    return "ExportPair {" + fileName + ", " + name + ", " + version + "}";
  }
}

public class BundleDeps {
  private String eclipseHome;

  public BundleDeps(String eclipseHome) {
    this.eclipseHome = eclipseHome;
  }

  private Manifest getManifest(String jarFileName) throws IOException {
    JarFile jarFile = new JarFile(jarFileName);

    Manifest manifest = getManifest(jarFile);

    jarFile.close();

    return manifest;
  }

  private Manifest getManifest(JarFile jarFile) throws IOException {
    Manifest manifest = null;

    ZipEntry zipEntry = jarFile.getEntry("META-INF/MANIFEST.MF");

    if (zipEntry == null) {
      zipEntry = jarFile.getEntry("meta-inf/manifest.mf");
    }

    if (zipEntry != null) {
      final InputStream is = jarFile.getInputStream(zipEntry);

      manifest = new Manifest(is);

      is.close();
    }

    return manifest;
  }

  private List retrieveExports(File dir) {
    List list = new ArrayList();

    File[] files = dir.listFiles();

    for(int i=0; i < files.length; i++) {
      String name = files[i].getName();


      if(name.endsWith(".jar")) {
        Manifest manifest = getManifest(files[i].getPath());

        if(manifest != null) {
          Attributes mainAttributes = manifest.getMainAttributes();

          String exportPackage = mainAttributes.getValue("Export-Package");

          if(exportPackage != null) {
            StringTokenizer st = new StringTokenizer(exportPackage, ",");

            while(st.hasMoreTokens()) { 
              String token = st.nextToken();

              String name;

              int index = token.indexOf(";");

              if(index != -1) {
                name = token.substring(0, index);
              }
              else {
                name = token;
              } 
              
              list.add(new ExportPair(files[i].getPath(), name, ""));
            }
          }
        }
      }
    }

    return list; 
  }

  private List retrieveImports(File file) {
    List list = new ArrayList();

    Manifest manifest = getManifest(file.getPath());

    if(manifest != null) {
      Attributes mainAttributes = manifest.getMainAttributes();

      String importPackage = mainAttributes.getValue("Import-Package");

      if(importPackage != null) {

        StringTokenizer st = new StringTokenizer(importPackage, ";\",=", true);

        while(st.hasMoreTokens()) { 
          String name = st.nextToken();

          st.nextToken(); // ;

          String token = st.nextToken();

          String version = "";

          if(!token.equals(",")) {
            if(token.startsWith("version")) {
              st.nextToken(); // =
              st.nextToken(); // "

              token = st.nextToken();

              while(!token.equals("\"")) {
                version += token;

                token = st.nextToken();
              }

              if(st.hasMoreTokens()) {
                st.nextToken(); // ,
              }
            }


            list.add(new ImportPair(name, version));
          }
        }
      }
    }

    return list;
  }

  ExportPair findExport(String name, List exportedPackages) {
    ExportPair exportPair = null;

    for(int i=0; i < exportedPackages.size() && exportPair == null; i++) {
      ExportPair exportedPackage = (ExportPair)exportedPackages.get(i);

      // System.out.println(exportedPackage.name + "->" + name);

      if(exportedPackage.name.equals(name)) {
        exportPair = exportedPackage;
      }
    }

    return exportPair;
  }

  public void analyze(String bundleJarName) {
    System.out.println("Input bundle jar:" + bundleJarName);

    File pluginJars = new File(eclipseHome + "/plugins");

    List exportedPackages = retrieveExports(pluginJars);

   // System.out.println(exportedPackages);

    List importedPackages = retrieveImports(new File(bundleJarName));

   // System.out.println(importedPackages);

    for(int i=0; i < importedPackages.size(); i++) {
      ImportPair importedPackage = (ImportPair)importedPackages.get(i);

      ExportPair exportPair = findExport(importedPackage.name, exportedPackages);

      System.out.println(importedPackage.name + " -> " + exportPair.fileName);
    }
  }

}


String eclipseHome = "c:/Work/eclipse";

String bundleJarName = eclipseHome + "/plugins/" + "org.eclipse.equinox.http.jetty_1.0.1.R33x_v20070816.jar";

BundleDeps analyzer = new BundleDeps(eclipseHome);

analyzer.analyze(bundleJarName);
