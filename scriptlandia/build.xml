<?xml version="1.0"?>

<project name="installer.ant" default="install" basedir=".">

  <!--splash imageurl="file:${basedir}/languages/scriptlandia/scriptlandia.ico"/-->


  <import file="scriptlandia-macrodefs.xml"/>

  <property file="${user.home}/launcher/config.properties"/>
  <property file="config.properties"/>

  <load-properties/>

  <property name="debug" value="on"/>
  <property name="optimize" value="on"/>
  <property name="deprecation" value="on"/>

  <condition property="os.is.windows">
    <os family="windows"/>
  </condition>

  <condition property="os.is.unix">
    <os family="unix"/>
  </condition>

  <!--target name="config">
    <antcall target="copy.config.files"/>

    <antcall target="configure.jdic.and.naligun"/>

    <antcall target="prepare.unix.files"/>
  </target-->

  <target name="install">
    <antcall target="copy.config.files"/>

    <antcall target="configure.jdic.and.naligun"/>

    <antcall target="install.libraries"/>

    <antcall target="prepare.unix.files"/>
  </target>

  <target name="copy.config.files">
    <!-- Variable ${java.home.internal} is set up inside install program. -->

    <script language="beanshell">
      String scriptlandiaHome = System.getProperty("scriptlandia.home");
      String launcherHome = System.getProperty("launcher.home");

      project.setNewProperty("scriptlandia.home.internal", scriptlandiaHome.replace('\\', '/'));
      project.setNewProperty("launcher.home.internal", launcherHome.replace('\\', '/'));
    </script>

      <filter token="scriptlandia.home" value="${scriptlandia.home}"/>
      <filter token="native.ruby.home" value="${native.ruby.home}"/>

      <filter token="launcher.home" value="${launcher.home}"/>

    <filterset id="copy.filterset">
      <filter token="java.specification.version.level" value="${java.specification.version.level}"/>
      <filter token="java.home.internal" value="${java.home.internal}"/>
      <filter token="mobile.java.home" value="${mobile.java.home}"/>
      <filter token="mobile.java.home" value="${mobile.java.home}"/>

      <!--filter token="proxyHost" value="${proxyHost}"/>
      <filter token="proxyPort" value="${proxyPort}"/-->

      <filter token="repository.home" value="${repository.home}"/>
      <filter token="scriptlandia.home" value="${scriptlandia.home.internal}"/>
      <filter token="native.ruby.home" value="${native.ruby.home}"/>

      <filter token="launcher.home" value="${launcher.home.internal}"/>
      <filter token="launcher.version" value="${launcher.version}"/>

      <filter token="scriptlandia.version" value="${scriptlandia.version}"/>
      <filter token="classworlds.version" value="${classworlds.version}"/>
      <filter token="maven.version" value="${maven.version}"/>
      <filter token="ant.version.internal" value="${ant.version.internal}"/>
      <filter token="beanshell.version" value="${beanshell.version}"/>
      <filter token="groovy.version" value="${groovy.version}"/>
      <filter token="javascript.version" value="${javascript.version}"/>
      <filter token="jruby.version" value="${jruby.version}"/>
      <filter token="pnuts.version" value="${pnuts.version}"/>
      <filter token="jython.version" value="${jython.version}"/>
      <filter token="jelly.version" value="${jelly.version}"/>
      <filter token="velocity.version" value="${velocity.version}"/>
      <filter token="scala.version" value="${scala.version}"/>
      <filter token="jaskell.version" value="${jaskell.version}"/>
      <filter token="clojure.version" value="${clojure.version}"/>

      <filter token="jdic.version" value="${jdic.version}"/>
      <filter token="nailgun.version" value="${nailgun.version}"/>
    </filterset>

    <!--antcall target="copy.settings.xml"/-->

    <script language="beanshell">
      source("projects/scriptlandia-config/src/main/bsh/ChecksumScript.bsh");

      String repositoryHome = System.getProperty("repository.home");

      File dir = new File(repositoryHome + "/org/sf/scriptlandia");

      ChecksumScript checksum = new ChecksumScript();

      checksum.calculate(dir);
    </script>

    <copy todir="${scriptlandia.home}" overwrite="true">
      <filterset refid="copy.filterset"/>

      <fileset dir="projects/scriptlandia-config/bin">
        <include name="*.bat"/>
        <include name="*.sh"/>
        <include name="*.conf"/>
        <include name="*.ini"/>
        <include name="scriptlandia.classpath"/>
        <exclude name="*-exe.*"/>
      </fileset>
    </copy>

    <!--copy todir="${scriptlandia.home}" overwrite="true">
      <fileset dir=".">
        <include name="projects/scriptlandia-installer/target/*.jar"/>

        <include name="scriptlandia.classpath"/>
      </fileset>
    </copy-->

    <copy todir="${java.io.tmpdir}" overwrite="true">
      <fileset dir="${scriptlandia.home}">
       <include name="ant.bat"/>
       <include name="mvn.bat"/>
       <include name="configure.bat"/>
       <include name="scriptlandia*.bat"/>
       <include name="nailgun*.bat"/>
      </fileset>
    </copy>

    <move todir="${scriptlandia.home}" overwrite="true">
      <fileset dir="${java.io.tmpdir}">
       <include name="ant.bat"/>
       <include name="mvn.bat"/>
       <include name="configure.bat"/>
       <include name="launcher*.bat"/>
       <include name="nailgun*.bat"/>
      </fileset>

      <filterchain>
        <replacestring from="/" to="\"/>
      </filterchain>
    </move>
  </target>

  <!--target name="configure.proxy">
    <script language="beanshell">
      String repositoryHome = System.getProperty("repository.home");

      addClassPath(repositoryHome + "/jdom/jdom/1.0/jdom-1.0.jar");

      source("projects/scriptlandia-config/src/main/bsh/ProxiesXmlHelper.bsh");

      ProxiesXmlHelper.main(new String[] {});
    </script>
  </target-->

  <target name="configure.jdic.and.naligun">
    <condition property="jdic.native.libs.present">
      <available file="${repository.home}/org/jdesktop/jdic-native-libs/${jdic.version}/jdic-native-libs-${jdic.version}.jar"/>
    </condition>

    <condition property="nailgun.binaries.present">
      <available file="${repository.home}/com/martiansoftware/nailgun-bin/${nailgun.version}/nailgun-bin-${nailgun.version}.jar"/>
    </condition>

    <antcall target="unzip.jdic.native.libs"/>
    <antcall target="unzip.nailgun.binaries"/>
  </target>

  <!--target name="copy.settings.xml">
    <copy todir="${user.home}/.m2" overwrite="false">
      <filterset>
        <filter token="proxyHost" value="${proxyHost}"/>
        <filter token="proxyHost" value="${proxyPort}"/>

        <filter token="repository.home" value="${repository.home}"/>
      </filterset>

      <fileset dir="projects/scriptlandia-config/src/main/config">
       <include name="settings.xml"/>
      </fileset>
    </copy>
  </target-->

  <target name="unzip.jdic.native.libs" if="jdic.native.libs.present">
    <script language="beanshell">
      String osName = System.getProperty("os.name").toLowerCase();

      if(osName.startsWith("windows")) {
        osName = "windows";
      }
      else if(osName.startsWith("linux")) {
        osName = "linux";
      }
      else if(osName.startsWith("sunos")) {
        osName = "sunos";
      }

      project.setNewProperty("os.name.temp", osName);

      String osArch = System.getProperty("os.arch").toLowerCase();

      if(osArch.startsWith("i386")) {
        osArch = "x86";
      }

      project.setNewProperty("os.arch.temp", osArch);
    </script>

    <unzip src="${repository.home}/org/jdesktop/jdic-native-libs/${jdic.version}/jdic-native-libs-${jdic.version}.jar"
           dest="${repository.home}/org/jdesktop/jdic/${jdic.version}" overwrite="false">
      <mapper type="flatten"/>

      <patternset>
        <include name="${os.name.temp}/jdic_stub.jar"/>
        <include name="${os.name.temp}/${os.arch.temp}/*.*"/>
      </patternset>
    </unzip>
<!--    
    <unzip src="${repository.home}/org/jdesktop/jdic-native-libs/${jdic.version}/jdic-native-libs-${jdic.version}.jar"
           dest="${repository.home}/org/jdesktop/jdic/${jdic.version}" overwrite="false">
    </unzip>
-->
  </target>

  <target name="unzip.nailgun.binaries" if="nailgun.binaries.present">
    <unzip src="${repository.home}/com/martiansoftware/nailgun-bin/${nailgun.version}/nailgun-bin-${nailgun.version}.jar"
           dest="${repository.home}/com/martiansoftware/nailgun-bin/${nailgun.version}" overwrite="false"/>
  </target>

  <!--target name="package.projects">
    <installProject basedir="projects/antrun"/>
    <installProject basedir="projects/scriptlandia-installer"/>
    <installProject basedir="projects/scriptlandia-nailgun"/>
    <installProject basedir="projects/scriptlandia-launcher"/>
    <installProject basedir="projects/scriptlandia-helper"/>
  </target-->

  <!--target name="install.projects">
    <installProject basedir="projects/scriptlandia-nailgun" build="false"/>
    <installProject basedir="projects/scriptlandia-launcher" build="false"/>
    <installProject basedir="projects/scriptlandia-helper" build="false"/>
  </target-->

  <!--target name="install.languages">
    <installLanguages section="core"/>

    <installLanguages section="starter"/>

    <registerLanguages/>
  </target-->

  <!--target name="generate.scripts">
    <script language="beanshell">
      source("projects/scriptlandia-config/src/main/bsh/ext-installer.bsh");

      ExtInstaller installer = new ExtInstaller();
      installer.generateScripts();
    </script>
  </target-->

  <target name="install.libraries">
    <copy todir="${scriptlandia.home}">
      <fileset dir=".">
       <include name="build.xml"/>
       <include name="scriptlandia-macrodefs.xml"/>
       <include name="scriptlandia-classpath"/>
      </fileset>
    </copy>

    <!--copy todir="${scriptlandia.home}/languages">
      <fileset dir="languages">
       <include name="**/*.xml"/>
       <include name="**/src/**/*.java"/>
       <include name="**/target/**"/>
       <include name="**/*.ico"/>
      </fileset>
    </copy-->

    <!--copy todir="${scriptlandia.home}">
      <fileset dir="projects/scriptlandia-config/bin">
       <include name="*.exe"/>
      </fileset>
    </copy-->

    <!--copy todir="${scriptlandia.home}">
      <fileset dir=".">
        <include name="projects/scriptlandia-config/bin/*.*"/>
        <exclude name="projects/scriptlandia-config/bin/*.exe"/>
        <include name="projects/scriptlandia-config/src/main/bsh/**"/>
        <include name="projects/scriptlandia-config/src/main/config/**"/>
      </fileset>
    </copy-->

    <copy-properties/>
  </target>

  <target name="prepare.unix.files">
    <fixcrlf eol="unix" srcdir="${scriptlandia.home}" includes="*.sh"/>
    <chmod perm="ugo+x">
      <fileset dir="${scriptlandia.home}">
        <include name="*.sh"/>
      </fileset>
    </chmod>
  </target>

  <target name="assembly">
    <script language="beanshell">
/*      import org.sf.scriptlandia.MavenHelper;

      System.setProperty("-Djava.specification.version.level", "1.5");

      MavenHelper.executeMaven("pom.xml", new String[] { "assembly:assembly" });
*/
//print("test");

    import org.codehaus.classworlds.ClassWorld;
    import org.sf.jlaunchpad.DepsLauncher;
    import org.sf.jlaunchpad.JLaunchPadLauncher;
    import org.sf.jlaunchpad.core.LauncherCommandLineParser;


    String[] args = new String[]{ "assembly:assembly" };

    ClassWorld classWorld = new ClassWorld();

    LauncherCommandLineParser parser = new LauncherCommandLineParser();

    DepsLauncher launcher = new DepsLauncher(parser, args, classWorld);

    launcher.configure(Thread.currentThread().getContextClassLoader());

    launcher.resolveDependencies("bsh", "bsh", "2.0b5");

    import org.apache.maven.cli.MavenCli;

    MavenCli.main(args, classWorld);
  </script>

<!--
    <condition property="extension" value="bat" else="sh">
      <os family="Windows"/>
    </condition>

    <ant antfile="build.xml" dir="languages"/>

    <exec executable="mvn.${extension}">
      <arg value="assembly:assembly"/>
    </exec>
  -->
    <zip destfile="target/scriptlandia-${scriptlandia.version}-install.zip" update="true">
      <zipfileset dir="../../../jlaunchpad/trunk/launcher/projects" prefix="scriptlandia-${scriptlandia.version}/projects">
        <include name="**/target/*.jar"/>
        <include name="**/*.xml"/>
        <exclude name="**/target/*-javadoc.jar"/>
        <exclude name="**/target/*-sources.jar"/>
      </zipfileset>

      <zipfileset dir="../../../jlaunchpad/trunk/launcher" prefix="scriptlandia-${scriptlandia.version}">
        <include name="src/main/config/*.*"/>
      </zipfileset>
    </zip>
  </target>

  <!--target name="uninstall.all.languages">
    <script language="beanshell">
      source("projects/scriptlandia-config/src/main/bsh/ext-installer.bsh");

      ExtInstaller installer = new ExtInstaller();
      installer.uninstallAll();
    </script>
  </target-->
</project>
