<?xml version="1.0"?>

<project name="config.ant" default="config" basedir=".">

  <property file="${user.home}/scriptlandia/config.properties"/>
  <property file="config.properties"/>

  <import file="config-macrodefs.xml"/>
  <load-properties/>

  <property name="debug" value="on"/>
  <property name="optimize" value="on"/>
  <property name="deprecation" value="on"/>

  <condition property="os.is.windows">
    <os family="windows"/>
  </condition>

  <condition property="os.is.unix">
    <os family="unix"/>
  </condition>

  <target name="config">
    <antcall target="copy.config.files"/>

    <antcall target="configure.proxy"/>

    <antcall target="configure.jdic.and.naligun"/>

    <antcall target="install.languages"/>

    <antcall target="update.for.windows"/>

    <antcall target="update.for.unix"/>    
  </target>

  <target name="copy.config.files">
    <!-- Variable ${java.home.internal} is set up inside install program. -->

    <filterset id="copy.filterset">
      <filter token="java.home" value="${java.home.internal}"/>
      <filter token="mobile.java.home" value="${mobile.java.home}"/>

      <filter token="proxyHost" value="${proxyHost}"/>
      <filter token="proxyPort" value="${proxyPort}"/>

      <filter token="repository.home" value="${repository.home}"/>
      <filter token="maven.repo.local" value="${repository.home}"/>
      <filter token="scriptlandia.home" value="${scriptlandia.home}"/>
      <filter token="native.ruby.home" value="${native.ruby.home}"/>

      <filter token="launcher.home" value="${scriptlandia.home}/launcher"/>
      <filter token="launcher.version" value="${launcher.version}"/>

      <filter token="scriptlandia.version" value="${scriptlandia.version}"/>
      <filter token="classworlds.version" value="${classworlds.version}"/>
      <filter token="maven.version" value="${maven.version}"/>
      <filter token="ant.version.internal" value="${ant.version.internal}"/>
      <filter token="beanshell.version" value="${beanshell.version}"/>
      <filter token="groovy.version" value="${groovy.version}"/>
      <filter token="javascript.version" value="${javascript.version}"/>
      <filter token="jruby.version" value="${jruby.version}"/>
      <filter token="pnuts.version" value="${pnuts.version}"/>
      <filter token="jython.version" value="${jython.version}"/>
      <filter token="jelly.version" value="${jelly.version}"/>
      <filter token="velocity.version" value="${velocity.version}"/>
      <filter token="scala.version" value="${scala.version}"/>
      <filter token="jaskell.version" value="${jaskell.version}"/>

      <filter token="jdic.version" value="${jdic.version}"/>
      <filter token="nailgun.version" value="${nailgun.version}"/>
    </filterset>

    <condition property="jacob.lib.is.present">
      <and>
        <available file="${repository.home}/jacob/jacob-dll/1.10.1/jacob-dll-1.10.1.jar"/>
        <istrue value="true"/>
      </and>
    </condition>

    <antcall target="copy.settings.xml"/>

    <antcall target="unzip.jacob.lib"/>

    <script language="beanshell">
      source("projects/scriptlandia-config/src/main/bsh/ChecksumScript.bsh");

      String repositoryHome = System.getProperty("repository.home");

      File dir = new File(repositoryHome + "/org/sf/scriptlandia");

      ChecksumScript checksum = new ChecksumScript();

      checksum.calculate(dir);
    </script>

    <copy todir="${launcher.home}" overwrite="true">
      <filterset refid="copy.filterset"/>

      <fileset dir="projects/universal-launcher/src/main/config">
        <include name="*.*"/>
        <exclude name="*-repo.*"/>
      </fileset>
    </copy>

    <copy file="projects/universal-launcher/src/main/config/classworlds-repo.conf" 
          tofile="${launcher.home}/classworlds.conf" overwrite="true">
      <filterset refid="copy.filterset"/>
    </copy>

    <copy file="projects/universal-launcher/src/main/config/launcher-repo.conf" 
          tofile="${launcher.home}/launcher.conf" overwrite="true">
      <filterset refid="copy.filterset"/>
    </copy>

    <copy todir="${scriptlandia.home}" overwrite="true">
      <filterset refid="copy.filterset"/>

      <fileset dir="projects/scriptlandia-config/bin">
        <include name="*.bat"/>
        <include name="*.sh"/>
        <include name="*.ant"/>
        <include name="*.conf"/>
        <include name="*.ini"/>
        <exclude name="launcher.*"/>
      </fileset>
    </copy>

    <copy todir="${java.io.tmpdir}" overwrite="true">
      <fileset dir="${scriptlandia.home}">
       <include name="ant.bat"/>
       <include name="mvn.bat"/>
       <include name="configure.bat"/>
       <include name="scriptlandia*.bat"/>
       <include name="nailgun*.bat"/>
      </fileset>
    </copy>

    <move todir="${scriptlandia.home}" overwrite="true">
      <fileset dir="${java.io.tmpdir}">
       <include name="ant.bat"/>
       <include name="mvn.bat"/>
       <include name="configure.bat"/>
       <include name="launcher*.bat"/>
       <include name="nailgun*.bat"/>
      </fileset>

      <filterchain>
        <replacestring from="/" to="\"/>
      </filterchain>
    </move>
  </target>

  <target name="configure.proxy">
    <script language="beanshell">
      String repositoryHome = System.getProperty("repository.home");

      addClassPath(repositoryHome + "/jdom/jdom/1.0/jdom-1.0.jar");

      source("projects/scriptlandia-config/src/main/bsh/ProxiesXmlHelper.bsh");

      ProxiesXmlHelper.main(new String[] {});
    </script>
  </target>

  <target name="configure.jdic.and.naligun">
    <condition property="jdic.native.libs.present">
      <available file="${repository.home}/org/jdesktop/jdic-native-libs/${jdic.version}/jdic-native-libs-${jdic.version}.jar"/>
    </condition>

    <condition property="nailgun.binaries.present">
      <available file="${repository.home}/com/martiansoftware/nailgun-bin/${nailgun.version}/nailgun-bin-${nailgun.version}.jar"/>
    </condition>

    <antcall target="unzip.jdic.native.libs"/>
    <antcall target="unzip.nailgun.binaries"/>
  </target>

  <target name="install.languages">
    <property name="jdic.lib" value="${repository.home}/org/jdesktop/jdic/${jdic.version}/jdic-${jdic.version}.jar"/>
    <property name="jdom.lib" value="${repository.home}/jdom/jdom/1.0/jdom-1.0.jar"/>

    <script language="beanshell">
      addClassPath(project.getProperty("jdic.lib"));
      addClassPath(project.getProperty("jdom.lib"));

      source("projects/scriptlandia-config/src/main/bsh/ext-installer.bsh");

      new ExtInstaller().install();
    </script>
  </target>

  <target name="copy.settings.xml">
    <copy todir="${user.home}/.m2" overwrite="false">
      <filterset>
        <filter token="proxyHost" value="${proxyHost}"/>
        <filter token="proxyHost" value="${proxyPort}"/>

        <filter token="repository.home" value="${repository.home}"/>
      </filterset>

      <fileset dir="projects/scriptlandia-config/src/main/config">
       <include name="settings.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="unzip.jdic.native.libs" if="jdic.native.libs.present">
    <script language="beanshell">
      String osName = System.getProperty("os.name").toLowerCase();

      if(osName.startsWith("windows")) {
        osName = "windows";
      }
      else if(osName.startsWith("linux")) {
        osName = "linux";
      }
      else if(osName.startsWith("sunos")) {
        osName = "sunos";
      }

      project.setNewProperty("os.name.temp", osName);

      String osArch = System.getProperty("os.arch").toLowerCase();

      if(osArch.startsWith("i386")) {
        osArch = "x86";
      }

      project.setNewProperty("os.arch.temp", osArch);
    </script>

    <unzip src="${repository.home}/org/jdesktop/jdic-native-libs/${jdic.version}/jdic-native-libs-${jdic.version}.jar"
           dest="${repository.home}/org/jdesktop/jdic/${jdic.version}" overwrite="false">
      <mapper type="flatten"/>

      <patternset>
        <include name="${os.name.temp}/jdic_stub.jar"/>
        <include name="${os.name.temp}/${os.arch.temp}/*.*"/>
      </patternset>
    </unzip>
<!--    
    <unzip src="${repository.home}/org/jdesktop/jdic-native-libs/${jdic.version}/jdic-native-libs-${jdic.version}.jar"
           dest="${repository.home}/org/jdesktop/jdic/${jdic.version}" overwrite="false">
    </unzip>
-->
  </target>

  <target name="unzip.nailgun.binaries" if="nailgun.binaries.present">
    <unzip src="${repository.home}/com/martiansoftware/nailgun-bin/${nailgun.version}/nailgun-bin-${nailgun.version}.jar"
           dest="${repository.home}/com/martiansoftware/nailgun-bin/${nailgun.version}" overwrite="false"/>
  </target>

  <target name="unzip.jacob.lib" if="jacob.lib.is.present">
    <unzip src="${repository.home}/jacob/jacob-dll/1.10.1/jacob-dll-1.10.1.jar"
           dest="${repository.home}/jacob/jacob-dll/1.10.1" overwrite="false">
      <patternset>
        <include name="*.dll"/>
      </patternset>
    </unzip>
  </target>

  <target name="update.for.windows" if="os.is.windows">
  </target>

  <target name="update.for.unix" if="os.is.unix">
    <!-- todo -->

    <!-- for UNIX -->
    <fixcrlf eol="unix" srcdir="${scriptlandia.home}" includes="*.sh"/>

    <chmod perm="ugo+x">
      <fileset dir="${scriptlandia.home}">
        <include name="*.sh"/>
      </fileset>
    </chmod>
  </target>

</project>
