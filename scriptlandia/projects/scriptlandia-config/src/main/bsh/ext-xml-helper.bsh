// ExtXmlHelper.bsh

package org.sf.scriptlandia.install;

import org.jdom.Element;
import org.jdom.Attribute;
import org.jdom.JDOMException;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.File;
import java.io.FileOutputStream;

import org.apache.tools.ant.Project;

sourceRelative("XmlHelper.bsh");

public class ExtXmlHelper extends XmlHelper {
  private List languages = new ArrayList();

  private String languageDir;

  public ExtXmlHelper(String languageDir) {
    this.languageDir = languageDir;
  }

  public void readLanguages() {
    languages.clear();

    File[] list = new File(languageDir).listFiles();

    for(int i=0; i < list.length; i++) {
      if(!list[i].isHidden()) {
        String language = list[i].getName();

        read(new File(languageDir + "/" + language + "/language.xml"));

        Map map = getLanguage(language);

        if(map != null) {
          languages.add(map);
        }
      }
    }
  }

  public List getLanguages() {
    return languages;
  }

  public Map getLanguage(String language) {
    Element child = document.getRootElement();

    Element registration = getElementByName(child, "registration");

    List extensions = getElementByName(registration, "extensions").getChildren();

    Map map = new HashMap();

    Attribute disabled = child.getAttribute("disabled");

    if(disabled != null && disabled.getValue().equalsIgnoreCase("true")) {
      return null;
    }

    map.put("name", child.getAttribute("name").getValue());

    Attribute groupId = child.getAttribute("groupId");

    if(groupId != null) {
      map.put("groupId", groupId.getValue());
    }
  
    Attribute artifactId = child.getAttribute("artifactId");

    if(artifactId != null) {
      map.put("artifactId", artifactId.getValue());
    }

    Attribute version = child.getAttribute("version");

    if(version != null) {
      map.put("version", version.getValue());
    }

    map.put("mimeType", registration.getAttribute("mimeType").getValue());
    map.put("icon", registration.getAttribute("icon").getValue());

    Element starter = getElementByName(registration, "starter");

//    map.put("starter.groupId", starter.getAttribute("groupId").getValue());
//    map.put("starter.artifactId", starter.getAttribute("artifactId").getValue());
//    map.put("starter.version", starter.getAttribute("version").getValue());

    map.put("starter.groupId", "org.sf.scriptlandia");
    map.put("starter.artifactId", language + "-starter");
    map.put("starter.version", "2.2.2");

    map.put("mainClass", getElementByName(starter, "mainClass").getValue());

    Element commandLine = getElementByName(starter, "commandLine");

    if(commandLine != null) {
      map.put("commandLine", commandLine.getValue());
    }

    List list = new ArrayList();

    for(int j=0; j < extensions.size(); j++) {
      Element extension = (Element)extensions.get(j);

      list.add(extension.getValue());
    }

    map.put("extensions", list);

    return map;
  }

  public void copyProperties(String propsFileName) throws IOException {
    Properties props = new Properties();

    File propsFile = new File(propsFileName);

    if(propsFile.exists()) {
      props.load(new FileInputStream(propsFile));
    }

    String repositoryHome = System.getProperty("repository.home");

    for(int i=0; i < languages.size(); i++) {
      Map map = (Map)languages.get(i);

      if(map.get("name") == null || map.get("groupId") == null || 
         map.get("artifactId") == null || map.get("version") == null) {
        continue;
      }

      String name = (String)map.get("name");
      String groupId = (String)map.get("groupId");
      String artifactId = (String)map.get("artifactId");
      String version = (String)map.get("version");

      props.put(name + ".version", version);
      props.put(name + ".base", repositoryHome + "/" + groupId.replace('.', '/') + "/" +
                                artifactId + "/" + version);
    }

    props.store(new FileOutputStream(propsFileName), "Scriptlandia properties");
  }

  public void setupProperties(Project project) {
    String repositoryHome = System.getProperty("repository.home");

    for(int i=0; i < languages.size(); i++) {
      Map map = (Map)languages.get(i);

      if(map.get("name") == null || map.get("groupId") == null || 
         map.get("artifactId") == null || map.get("version") == null) {
        continue;
      }

      String name = (String)map.get("name");
      String groupId = (String)map.get("groupId");
      String artifactId = (String)map.get("artifactId");
      String version = (String)map.get("version");

      project.setNewProperty(name + ".version", version);
      project.setNewProperty(name + ".base", repositoryHome + "/" + groupId.replace('.', '/') + "/" +
                                             artifactId + "/" + version);
    }
  }

  public static void main(String[] args) throws IOException, JDOMException {
    ExtXmlHelper xmlHelper = new ExtXmlHelper("../../../../../languages");
    xmlHelper.readLanguages();

    System.out.println(xmlHelper.getLanguages());
  }

}
